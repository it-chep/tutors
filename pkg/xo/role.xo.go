// Code generated by xo. DO NOT EDIT.
// Package xo contains the types for schema 'public'.
package xo

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
)

// Role represents a row from 'public.roles'.
type Role struct {
	ID          int64          `db:"id" json:"id"`                   // id bigint
	Name        string         `db:"name" json:"name"`               // name character varying(50)
	Description sql.NullString `db:"description" json:"description"` // description text
}

// zeroRole zero value of dto
var zeroRole = Role{}

// Constants that should be used when building where statements
const (
	Alias_Role             = "r"
	Table_Role_With_Alias  = "roles AS r"
	Table_Role             = "roles"
	Field_Role_ID          = "id"
	Field_Role_Name        = "name"
	Field_Role_Description = "description"
)

func (t Role) SelectColumnsWithCoalesce() []string {
	return []string{
		fmt.Sprintf("COALESCE(r.id, %v) as id", zeroRole.ID),
		fmt.Sprintf("COALESCE(r.name, '%v') as name", zeroRole.Name),
		"r.description",
	}
}

func (t Role) SelectColumns() []string {
	return []string{
		"r.id",
		"r.name",
		"r.description",
	}
}

func (t Role) Columns(without ...string) []string {
	var str = "id, name, description"
	for _, exc := range without {
		str = strings.Replace(str+", ", exc+", ", "", 1)
	}
	return strings.Split(strings.TrimRight(str, ", "), ", ")
}

func (t Role) WithTable(col string) string {
	return fmt.Sprintf("r.%s", col)
}

func (t Role) IsEmpty() bool {
	return reflect.DeepEqual(t, zeroRole)
}

func (t Role) Join(rightColumnTable string, leftColumnTable string) string {
	return fmt.Sprintf("roles AS r ON r.%s = %s", rightColumnTable, leftColumnTable)
}

func (t *Role) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"id":          t.ID,
		"name":        t.Name,
		"description": t.Description,
	}
}

func (t *Role) Values(colNames ...string) (vals []interface{}) {
	m := t.ToMap()

	for _, v := range colNames {
		vals = append(vals, m[v])
	}

	return vals
}
