// Code generated by xo. DO NOT EDIT.
// Package xo contains the types for schema 'public'.
package xo

import (
	"fmt"
	"reflect"
	"strings"
)

// Tutor represents a row from 'public.tutors'.
type Tutor struct {
	ID          int64  `db:"id" json:"id"`                       // id bigint
	CostPerHour string `db:"cost_per_hour" json:"cost_per_hour"` // cost_per_hour money
	SubjectID   int64  `db:"subject_id" json:"subject_id"`       // subject_id bigint
	AdminID     int64  `db:"admin_id" json:"admin_id"`           // admin_id bigint
}

// zeroTutor zero value of dto
var zeroTutor = Tutor{}

// Constants that should be used when building where statements
const (
	Alias_Tutor             = "t"
	Table_Tutor_With_Alias  = "tutors AS t"
	Table_Tutor             = "tutors"
	Field_Tutor_ID          = "id"
	Field_Tutor_CostPerHour = "cost_per_hour"
	Field_Tutor_SubjectID   = "subject_id"
	Field_Tutor_AdminID     = "admin_id"
)

func (t Tutor) SelectColumnsWithCoalesce() []string {
	return []string{
		fmt.Sprintf("COALESCE(t.id, %v) as id", zeroTutor.ID),
		fmt.Sprintf("COALESCE(t.cost_per_hour, '%v') as cost_per_hour", zeroTutor.CostPerHour),
		fmt.Sprintf("COALESCE(t.subject_id, %v) as subject_id", zeroTutor.SubjectID),
		fmt.Sprintf("COALESCE(t.admin_id, %v) as admin_id", zeroTutor.AdminID),
	}
}

func (t Tutor) SelectColumns() []string {
	return []string{
		"t.id",
		"t.cost_per_hour",
		"t.subject_id",
		"t.admin_id",
	}
}

func (t Tutor) Columns(without ...string) []string {
	var str = "id, cost_per_hour, subject_id, admin_id"
	for _, exc := range without {
		str = strings.Replace(str+", ", exc+", ", "", 1)
	}
	return strings.Split(strings.TrimRight(str, ", "), ", ")
}

func (t Tutor) WithTable(col string) string {
	return fmt.Sprintf("t.%s", col)
}

func (t Tutor) IsEmpty() bool {
	return reflect.DeepEqual(t, zeroTutor)
}

func (t Tutor) Join(rightColumnTable string, leftColumnTable string) string {
	return fmt.Sprintf("tutors AS t ON t.%s = %s", rightColumnTable, leftColumnTable)
}

func (t *Tutor) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"id":            t.ID,
		"cost_per_hour": t.CostPerHour,
		"subject_id":    t.SubjectID,
		"admin_id":      t.AdminID,
	}
}

func (t *Tutor) Values(colNames ...string) (vals []interface{}) {
	m := t.ToMap()

	for _, v := range colNames {
		vals = append(vals, m[v])
	}

	return vals
}
