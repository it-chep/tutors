// Code generated by xo. DO NOT EDIT.
// Package xo contains the types for schema 'public'.
package xo

import (
	"fmt"
	"reflect"
	"strings"
)

// Registration represents a row from 'public.registration'.
type Registration struct {
	TgID int64 `db:"tg_id" json:"tg_id"` // tg_id bigint
}

// zeroRegistration zero value of dto
var zeroRegistration = Registration{}

// Constants that should be used when building where statements
const (
	Alias_Registration            = "r"
	Table_Registration_With_Alias = "registration AS r"
	Table_Registration            = "registration"
	Field_Registration_TgID       = "tg_id"
)

func (t Registration) SelectColumnsWithCoalesce() []string {
	return []string{
		fmt.Sprintf("COALESCE(r.tg_id, %v) as tg_id", zeroRegistration.TgID),
	}
}

func (t Registration) SelectColumns() []string {
	return []string{
		"r.tg_id",
	}
}

func (t Registration) Columns(without ...string) []string {
	var str = "tg_id"
	for _, exc := range without {
		str = strings.Replace(str+", ", exc+", ", "", 1)
	}
	return strings.Split(strings.TrimRight(str, ", "), ", ")
}

func (t Registration) WithTable(col string) string {
	return fmt.Sprintf("r.%s", col)
}

func (t Registration) IsEmpty() bool {
	return reflect.DeepEqual(t, zeroRegistration)
}

func (t Registration) Join(rightColumnTable string, leftColumnTable string) string {
	return fmt.Sprintf("registration AS r ON r.%s = %s", rightColumnTable, leftColumnTable)
}

func (t *Registration) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"tg_id": t.TgID,
	}
}

func (t *Registration) Values(colNames ...string) (vals []interface{}) {
	m := t.ToMap()

	for _, v := range colNames {
		vals = append(vals, m[v])
	}

	return vals
}
