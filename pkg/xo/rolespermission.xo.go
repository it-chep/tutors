// Code generated by xo. DO NOT EDIT.
// Package xo contains the types for schema 'public'.
package xo

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
)

// RolesPermission represents a row from 'public.roles_permissions'.
type RolesPermission struct {
	ID           int64         `db:"id" json:"id"`                       // id bigint
	RoleID       sql.NullInt64 `db:"role_id" json:"role_id"`             // role_id bigint
	PermissionID sql.NullInt64 `db:"permission_id" json:"permission_id"` // permission_id bigint
}

// zeroRolesPermission zero value of dto
var zeroRolesPermission = RolesPermission{}

// Constants that should be used when building where statements
const (
	Alias_RolesPermission              = "rp"
	Table_RolesPermission_With_Alias   = "roles_permissions AS rp"
	Table_RolesPermission              = "roles_permissions"
	Field_RolesPermission_ID           = "id"
	Field_RolesPermission_RoleID       = "role_id"
	Field_RolesPermission_PermissionID = "permission_id"
)

func (t RolesPermission) SelectColumnsWithCoalesce() []string {
	return []string{
		fmt.Sprintf("COALESCE(rp.id, %v) as id", zeroRolesPermission.ID),
		"rp.role_id",
		"rp.permission_id",
	}
}

func (t RolesPermission) SelectColumns() []string {
	return []string{
		"rp.id",
		"rp.role_id",
		"rp.permission_id",
	}
}

func (t RolesPermission) Columns(without ...string) []string {
	var str = "id, role_id, permission_id"
	for _, exc := range without {
		str = strings.Replace(str+", ", exc+", ", "", 1)
	}
	return strings.Split(strings.TrimRight(str, ", "), ", ")
}

func (t RolesPermission) WithTable(col string) string {
	return fmt.Sprintf("rp.%s", col)
}

func (t RolesPermission) IsEmpty() bool {
	return reflect.DeepEqual(t, zeroRolesPermission)
}

func (t RolesPermission) Join(rightColumnTable string, leftColumnTable string) string {
	return fmt.Sprintf("roles_permissions AS rp ON rp.%s = %s", rightColumnTable, leftColumnTable)
}

func (t *RolesPermission) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"id":            t.ID,
		"role_id":       t.RoleID,
		"permission_id": t.PermissionID,
	}
}

func (t *RolesPermission) Values(colNames ...string) (vals []interface{}) {
	m := t.ToMap()

	for _, v := range colNames {
		vals = append(vals, m[v])
	}

	return vals
}
